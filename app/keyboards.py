from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiosqlite import Row

checking_choise_markup = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–ö—Ä—É–∂–æ—á–∫–æ–º', callback_data='video_note')],
    [InlineKeyboardButton(text='–§–æ—Ç–æ—á–∫–∞–º–∏', callback_data='photoes')]
])

checking_cancel_markup = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='cancel')]
])


async def make_keyboard_accepting(id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–î–∞, –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æüòä',
                              callback_data=f'accepted_{id}')],
        [InlineKeyboardButton(text='–ù–µ—Ç, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æüò†',
                              callback_data=f'rejected_{id}')]
    ])


async def make_profile_markup(id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å :3',
                              callback_data='profile_{id}')]
    ])

shop_markup = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text='–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—á–∏–∫–æ–≤^^',
                              callback_data='shop__list_of_products')],
        [InlineKeyboardButton(text='–°–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä—á–∏–∫^^',
                              callback_data='shop__create_product')],
        [InlineKeyboardButton(text='–ú–æ–∏ —Ç–æ–≤–∞—Ä—á–∏–∫–∏^^',
                              callback_data='shop__list_of_user_products')]
    ]
)

question_markup = InlineKeyboardMarkup(
    inline_keyboard=[[
        InlineKeyboardButton(text='–î–∞ ‚úÖ', callback_data='yes'),
        InlineKeyboardButton(text='–ù–µ—Ç ‚ùå', callback_data='no')
    ]]
)

return_to_list_markup = InlineKeyboardMarkup(
    inline_keyboard=[[
        InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É',
                             callback_data='return_to_list')
    ]]
)

# product_id
# title
# description
# author_id
# price


async def generate_markup_list_of_products(current_idx: int,
                                           list_of_products: list[Row],
                                           from_user: bool = False):
    if not (list and (0 <= current_idx < len(list_of_products))):
        raise IndexError('–ò–Ω–¥–µ–∫—Å –≤—ã—à–µ–ª –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã((')

    current_id_of_product = list_of_products[current_idx]['product_id']
    second_row = []
    first_row = []

    if not from_user:
        if len(list_of_products) == 1:
            second_row = []
        elif current_idx == 0:
            second_row = [InlineKeyboardButton(
                text='–î–∞–ª–µ–µ ‚û°', callback_data=f'next_{current_idx}')]
        elif (current_idx + 1) == len(list_of_products):
            second_row = [InlineKeyboardButton(
                text='‚¨Ö –ù–∞–∑–∞–¥', callback_data=f'back_{current_idx}')]
        else:
            second_row = [
                InlineKeyboardButton(text='‚¨Ö', callback_data=f'back_{
                    current_idx}'),
                InlineKeyboardButton(text='‚û°', callback_data=f'next_{
                    current_idx}')
            ]

        first_row = [InlineKeyboardButton(
            text='–ö—É–ø–∏—Ç—å', callback_data=f'buy_{current_id_of_product}')]
    else:
        if len(list_of_products) == 1:
            second_row = []
        elif current_idx == 0:
            second_row = [InlineKeyboardButton(
                text='–î–∞–ª–µ–µ ‚û°', callback_data=f'next_user_{current_idx}')]
        elif (current_idx + 1) == len(list_of_products):
            second_row = [InlineKeyboardButton(
                text='‚¨Ö –ù–∞–∑–∞–¥', callback_data=f'back_user_{current_idx}')]
        else:
            second_row = [
                InlineKeyboardButton(text='‚¨Ö', callback_data=f'back_user_{
                    current_idx}'),
                InlineKeyboardButton(text='‚û°', callback_data=f'next_user_{
                    current_idx}')
            ]

        first_row = [InlineKeyboardButton(
            text='–£–¥–∞–ª–∏—Ç—å üóë', callback_data=f'delete_{current_id_of_product}')]

    return InlineKeyboardMarkup(
        inline_keyboard=[
            first_row,
            *[second_row],
            [InlineKeyboardButton(
                text='–ù–∞–∑–∞–¥...', callback_data='return')]]
    )


async def make_product_accepting(id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–î–∞, –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æüòä',
                              callback_data=f'product_accepted_{id}')],
        [InlineKeyboardButton(text='–ù–µ—Ç, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æüò†',
                              callback_data=f'product_rejected_{id}')]
    ])

publish_product_markup = InlineKeyboardMarkup(
    inline_keyboard=[[
        InlineKeyboardButton(text='–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—á–∏–∫^^',
                             callback_data='publish')
    ]]
)

return_markup = InlineKeyboardMarkup(inline_keyboard=[[
    InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data='return')
]])
