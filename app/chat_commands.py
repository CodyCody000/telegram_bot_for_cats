from aiogram import F, Router, html
from aiogram.types import Message, ChatMemberAdministrator, ChatMemberOwner
from aiogram.filters import Command, CommandObject
from aiogram.enums import ParseMode
from app.registration import generate_invite_link
from dotenv import dotenv_values

from aiosqlite import Row
from asyncio import sleep

from app.filters import (IsInChatAndChannel, CorrectCommand, IsNotMuted,
                         IsRegistrated, IsNotBanned)
from database.database import (get_user_username, set_ban_state, set_mute_state,
                               incriment_warns, decriment_warns, get_users)
from database.database import clear_warns as _clear_warns

group_commands_router = Router()
group_commands_router.message.filter(F.chat.type.in_(['group', 'supergroup']),
                                     IsRegistrated(), IsNotMuted(), IsInChatAndChannel())
mailing_router = Router()
mailing_router.message.filter(F.chat.type == 'private', IsRegistrated(),
                              IsNotBanned(), IsInChatAndChannel())


async def is_admin(message: Message):
    member = await message.bot.get_chat_member(dotenv_values()['CATS_GROUP_ID'], message.from_user.id)
    return isinstance(member, (ChatMemberAdministrator, ChatMemberOwner))


async def user_getter(message: Message, command: CommandObject):
    if message.reply_to_message:
        username = message.reply_to_message.from_user.username
    else:
        username = command.args.removeprefix('@')

    return await get_user_username(username)


@group_commands_router.message(Command('ban'), CorrectCommand())
async def ban(message: Message, command: CommandObject,
              user_info: Row | None = None):
    if not await is_admin(message):
        await message.answer('–¢—ã –Ω–µ –∞–¥–º–∏–Ω—á–∏–∫((')
        return

    if user_info is None:
        user_info = await user_getter(message, command)
        if not user_info:
            await message.reply(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç–∏–∫—É –≤ –ª—Å {html.code('/start')}',
                                parse_mode=ParseMode.HTML)
            return

    await message.chat.ban(user_info['user_id'])
    await set_ban_state(user_info['user_id'], True)
    await message.answer(f'–ö–æ—Ç—è @{user_info['username']} –∫ —Å–æ–∂–∞–ª–µ–Ω—å–∏—Ü—É –∑–∞–±–∞–Ω–µ–Ω, –ø–æ–º—è–Ω–µ–º üòî')


@group_commands_router.message(Command('unban'), CorrectCommand())
async def unban(message: Message, command: CommandObject):
    if not await is_admin(message):
        await message.answer('–¢—ã –Ω–µ –∞–¥–º–∏–Ω—á–∏–∫((')
        return

    user_info = await user_getter(message, command)
    if not user_info:
        await message.reply(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç–∏–∫—É –≤ –ª—Å {html.code('/start')}',
                            parse_mode=ParseMode.HTML)
        return

    await message.chat.unban(user_info['user_id'])
    await set_ban_state(user_info['user_id'], False)
    await _clear_warns(user_info['user_id'])
    invite_link = await generate_invite_link(message.bot)
    await message.bot.send_message(user_info['user_id'],
                                   f'–ú—ã –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç —Ç–µ–±—è –æ–±—Ä–∞—Ç—å–Ω–æ, –≤–æ—Ç —Å—Å—ã–ª–æ—á–∫–∞ {invite_link} ^^')
    await message.answer(f'–ö–æ—Ç—é @{user_info['username']} –∫ —Å—á–∞—Å—Ç—å—é —Ä–∞–∑–±–∞–Ω–∏–ª–∏, —É—Ä—è^^ –ê –µ—â—ë –æ–Ω –±—ã–ª –ø—Ä–∏–≥–ª–∞—à—ë–Ω –æ–±—Ä–∞—Ç–Ω–µ–Ω—å–∫–æ')


@group_commands_router.message(Command('mute'), CorrectCommand())
async def mute(message: Message, command: CommandObject):
    if not await is_admin(message):
        await message.answer('–¢—ã –Ω–µ –∞–¥–º–∏–Ω—á–∏–∫((')
        return

    user_info = await user_getter(message, command)
    if not user_info:
        await message.reply(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç–∏–∫—É –≤ –ª—Å {html.code('/start')}',
                            parse_mode=ParseMode.HTML)
        return

    await set_mute_state(user_info['user_id'], True)
    await message.answer(f'–î–ª—è –∫–æ—Ç–∏ @{user_info['username']} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –º–æ–ª—á–∞–Ω–∫–∞!')


@group_commands_router.message(Command('unmute'), CorrectCommand())
async def unmute(message: Message, command: CommandObject):
    if not await is_admin(message):
        await message.answer('–¢—ã –Ω–µ –∞–¥–º–∏–Ω—á–∏–∫((')
        return

    user_info = await user_getter(message, command)
    if not user_info:
        await message.reply(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç–∏–∫—É –≤ –ª—Å {html.code('/start')}',
                            parse_mode=ParseMode.HTML)
        return

    await set_mute_state(user_info['user_id'], False)
    await message.answer(f'@{user_info['username']}, –º–æ–ª—á–∞–Ω–∫–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞^^')


@group_commands_router.message(Command('kick'), CorrectCommand())
async def kick(message: Message, command: CommandObject):
    if not await is_admin(message):
        await message.answer('–¢—ã –Ω–µ –∞–¥–º–∏–Ω—á–∏–∫((')
        return

    user_info = await user_getter(message, command)
    if not user_info:
        await message.reply(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç–∏–∫—É –≤ –ª—Å {html.code('/start')}',
                            parse_mode=ParseMode.HTML)
        return

    await message.chat.ban(user_info['user_id'])
    await message.chat.unban(user_info['user_id'])
    await message.answer(f'–ö–æ—Ç–∏–∫–∞ @{user_info['username']} –∫–∏–∫–Ω—É–ª–∏, –≥—Ä—É—Å—å–Ω—è(')


@group_commands_router.message(Command('warn'))
async def warn(message: Message, command: CommandObject):
    if not await is_admin(message):
        await message.answer('–¢—ã –Ω–µ –∞–¥–º–∏–Ω—á–∏–∫((')
        return

    user_info = await user_getter(message, command)
    if not user_info:
        await message.reply(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç–∏–∫—É –≤ –ª—Å {html.code('/start')}',
                            parse_mode=ParseMode.HTML)
        return

    await incriment_warns(user_info['user_id'])
    current_warns = user_info['warn_count'] + 1
    if current_warns >= 3:
        await ban(message, command, user_info)
        return
    await message.answer(f'–ö–æ—Ç–∏–∫–∞ @{user_info["username"]} –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–ª–∏, —É –Ω–µ–≥–æ —É–∂–µ {current_warns} –≤–∞—Ä–Ω–∞ –∏–∑ 3. –ù–∞–¥–µ—é—Å—å –±–æ–ª—å—à–µ –æ–Ω –Ω–µ –±—É–¥–µ—Ç –±–∞–ª–æ–≤–∞—Ç—å—Å—è^^')
    await message.answer('–ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—å–∫—É —ç—Ç–æ—Ç –≤–∞—Ä–Ω–∏–∫ —É–±–µ—Ä—ë—Ç—Å—è^^')
    await sleep(7*24*60*60)
    await decriment_warns(user_info['user_id'])


@group_commands_router.message(Command('clear_warns'), CorrectCommand())
async def clear_warns(message: Message, command: CommandObject):
    if not await is_admin(message):
        await message.answer('–¢—ã –Ω–µ –∞–¥–º–∏–Ω—á–∏–∫((')
        return

    user_info = await user_getter(message, command)
    if not user_info:
        await message.reply(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç–∏–∫—É –≤ –ª—Å {html.code('/start')}',
                            parse_mode=ParseMode.HTML)
        return

    await _clear_warns(user_info['user_id'])
    await message.answer(f'–£ –∫–æ—Ç–∏–∫–∞ @{user_info["username"]} –≤—Å–µ –≤–∞—Ä–Ω—ã –±—ã–ª–∏ —Å—Ç—ë—Ä—Ç—ã, –∫—Ä—É—Ç—è–∫^^')


@group_commands_router.message(Command('call'))
async def call(message: Message, command: CommandObject):
    if not await is_admin(message):
        await message.answer('–¢—ã –Ω–µ –∞–¥–º–∏–Ω—á–∏–∫((')
        return

    if command.args:
        message_text = f'–°–æ–∑—ã–≤–∞–µ—Ç –∫–æ—Ç—è—Ç —Å–æ —Å–ª–æ–≤–∞–º–∏: "{command.args}"\n'
    else:
        message_text = '–°–æ–∑—ã–≤–∞–µ—Ç –∫–æ—Ç—è—Ç\n'

    for user in await get_users():
        message_text += f'\n‚Ä¢ {html.link(user['name'],
                                         f'tg://user?id={user["user_id"]}')}'

    await message.reply(message_text,
                        parse_mode=ParseMode.HTML)


@mailing_router.message(Command('call'))
async def call_mailing(message: Message, command: CommandObject):
    if not await is_admin(message):
        await message.answer('–¢—ã –Ω–µ –∞–¥–º–∏–Ω—á–∏–∫((')
        return

    if command.args:
        message_text = f'–¢—É—Ç —Ä–∞—Å—Å—ã–ª–æ—á–∫–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Å —Ç–∞–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º: {
            command.args}'
    else:
        message_text = '–¢—É—Ç —Ä–∞—Å—Å—ã–ª–æ—á–∫–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞, –ø–æ—Å–º–æ—Ç—Ä–∏, –º–± –≤ —á–∞—Ç–∏–∫–µ —á—Ç–æ –Ω–∏—Ç—å'

    for user in await get_users():
        await message.bot.send_message(user['user_id'], message_text)
