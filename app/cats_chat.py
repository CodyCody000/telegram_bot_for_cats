from aiogram import Router, F, html
from aiogram.types import Message, ChatMemberUpdated
from aiogram.types import ChatMemberAdministrator, ChatMemberOwner
from aiogram.filters import ChatMemberUpdatedFilter, Command
from aiogram.filters.chat_member_updated import JOIN_TRANSITION, IS_ADMIN
from aiogram.enums import ParseMode
from dotenv import dotenv_values

from database.database import get_user, get_user_username
from app.filters import IsRegistrated, IsNotMuted, IsInChatAndChannel

cats_chat = Router()
cats_chat.message.filter(F.chat.type.in_(['group', 'supergroup']),
                         IsRegistrated(), IsNotMuted(), IsInChatAndChannel())
actions = {
    '–æ–±–Ω—è—Ç—å': ('{} –æ–±–Ω—è–ª –∫–æ—Ç–∏–∫–∞ {} ü§ó', 'HUGGING'),
    '—à–ª—ë–ø–Ω—É—Ç—å': ('{} —à–ª—ë–ø–Ω—É–ª –∫–æ—Ç–∏–∫–∞ {} üëã', 'SLAPPING'),
    '–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å': ('{} –ø–æ—Ü–µ–ª–æ–≤–∞–ª –∫–æ—Ç–∏–∫–∞ {} üíã', 'KISSING'),
    '–ø–æ—Å—Ç–æ–Ω–∞—Ç—å': ('{} –ø–æ—Å—Ç–æ–Ω–∞–ª –∫–æ—Ç–∏–∫—É {} ü•µ', 'MOANING'),
    '–æ—Ç—Å–æ—Å–∞—Ç—å': ('{} –æ—Ç—Å–æ—Å–∞–ª –∫–æ—Ç–∏–∫—É {} üëÖ', 'SUCKING'),
    '–≤—ã–µ–±–∞—Ç—å': ('{} –≤—ã–µ–±–∞–ª –∫–æ—Ç–∏–∫–∞ {} üçÜ', 'FUCKING'),
    '–∫–æ–Ω—á–∏—Ç—å': ('{} –∫–æ–Ω—á–∏–ª –Ω–∞/–≤ –∫–æ—Ç–∏–∫–∞ {} üí¶', 'CUMMING'),
    '–ø–æ–≥–ª–∞–¥–∏—Ç—å': ('{} –ø–æ–≥–ª–∞–¥–∏–ª –∫–æ—Ç–∏–∫–∞ {} üòä', 'STROKING'),
    '–ø—Ä–∏–∂–∞—Ç—å': ('{} –ø—Ä–∏–∂–∞–ª –∫–æ—Ç–∏–∫–∞ {} üò≥', 'PINNING')
}


@cats_chat.my_chat_member(ChatMemberUpdatedFilter(JOIN_TRANSITION))
async def added_to_group(event: ChatMemberUpdated):
    if isinstance(event.new_chat_member, (ChatMemberAdministrator, ChatMemberOwner)):
        await event.answer('–ü—Ä–∏–≤–µ—Ç, —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏ –º–µ–Ω—è –≤ —ç—Ç–æ—Ç –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π —á–∞—Ç, –∫–∞–∫ –∞–¥–º–∏–Ω—á–∏–∫–∞^^')
    else:
        await event.answer('–ü—Ä–∏–≤–µ—Ç, —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏ –º–µ–Ω—è –≤ —ç—Ç–æ—Ç –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π —á–∞—Ç^^ \
–°–¥–µ–ª–∞–π—Ç–µ –º–µ–Ω—è –∞–¥–º–∏–Ω—á–∏–∫–æ–º, —á—Ç–æ–±—ã —è —Ä–∞–±–æ—Ç–∞–ªüëâüëà')

    await event.bot.send_message(dotenv_values().get('CREATOR_ID'),
                                 f'ID-—á–∞—Ç–∏–∫–∞: {event.chat.id}')


@cats_chat.my_chat_member(ChatMemberUpdatedFilter(IS_ADMIN))
async def added_to_admins(event: ChatMemberUpdated):
    await event.answer('C–ø–∞—Å–∏–±–æ, —á—Ç–æ —Å–¥–µ–ª–∞–ª–∏ –º–µ–Ω—è –∞–¥–º–∏–Ω—á–∏–∫–æ–º^^')


@cats_chat.message(Command('list_of_actions'))
async def list_of_actions(message: Message):
    message_reply = f'–°–ø–∏—Å–æ—á–µ–∫ –¥–µ–π—Å—Ç–≤–∏–π^^:\n\n‚Ä¢ {'\n\n‚Ä¢ '.join(html.code(a.capitalize()) for a in actions)}\n\n\
–ß—Ç–æ–±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ, –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å {html.code('[–¥–µ–π—Å—Ç–≤–∏–µ] @[—é–∑–µ—Ä–Ω–µ–π–º]')} –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ {html.code('[–¥–µ–π—Å—Ç–≤–∏–µ]')} –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ^^'
    await message.reply(message_reply, parse_mode=ParseMode.HTML)


# –û—Å—Ç–∞–≤–ª—è–π –≤ —Å–∞–º–æ–º –Ω–∏–∑—É
@cats_chat.message(F.reply_to_message)
@cats_chat.message(F.text)
async def action(message: Message):
    command, *username = message.text.split()

    if (command := command.lower()) not in actions:
        return

    action = actions[command]

    from_user_data = await get_user(message.from_user.id)
    from_user_link = html.link(
        from_user_data['name'], f'tg://user?id={message.from_user.id}')

    if message.reply_to_message:
        to_user_data = await get_user(message.reply_to_message.from_user.id)
    else:
        to_user_data = await get_user_username(username[0].removeprefix('@'))

    if to_user_data is None:
        if message.reply_to_message.from_user.is_bot:
            to_user_link = html.link(
                message.reply_to_message.from_user.full_name,
                f'tg://user?id={message.reply_to_message.from_user.id}')
        else:
            return
    else:
        to_user_link = html.link(
            to_user_data['name'], f'tg://user?id={to_user_data['user_id']}')

    message_text = action[0].format(from_user_link, to_user_link)

    if not message.reply_to_message and username[1:]:
        message_text += f', c–æ —Å–ª–æ–≤–∞–º–∏: {' '.join(username[1:])}'
    elif message.reply_to_message and username:
        message_text += f', c–æ —Å–ª–æ–≤–∞–º–∏: {' '.join(username)}'

    await message.reply_document(dotenv_values(f'./app/.mediaenv').get(action[1]),
                                 caption=message_text,
                                 parse_mode=ParseMode.HTML)
