from aiogram import Router, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart, StateFilter
from aiogram.types import Message, CallbackQuery
from aiogram.enums import ParseMode
from random import choice
from dotenv import dotenv_values
from time import time

from app.filters import NameFilter, AgeLimit  # type: ignore
from app.keyboards import checking_choise_markup, checking_cancel_markup, make_keyboard_accepting  # type: ignore

hand_emojies = ['üëä', '‚úä', 'üëå', '‚òù', 'üëé', 'üëç', 'üôè', '‚úå', 'üñê', 'üññ', 'ü§ô', 'ü§ü']

ADMIN_GROUP_ID = dotenv_values().get('ADMIN_GROUP_ID')


class RegistrationStates(StatesGroup):
    name = State()
    age = State()
    task = State()
    video_note = State()
    photoes = State()
    checking = State()


reg_router = Router()
reg_router.message.filter(F.chat.type == 'private')
admin_chat_router = Router()
admin_chat_router.message.filter(F.chat.type.in_(['group', 'supergroup']))


@reg_router.message(StateFilter(None), CommandStart())
@reg_router.message(RegistrationStates.checking, CommandStart())
async def start(message: Message, state: FSMContext):
    await state.clear()
    await state.update_data(user_id=message.from_user.id)
    await state.update_data(photoes=[])
    await message.answer('''*–í–µ–¥—ë—Ç—Å—è –Ω–∞–±–æ—Ä –≤ gay\-—á–∞—Ç–∏–∫*üè≥Ô∏è‚Äçüåà

_–í —á–µ–º –ø–ª—é—Å?_
–ù–∞—à —á–∞—Ç –Ω–µ–±–æ–ª—å—à–æ–π, —Ç—É—Ç –≤—Å–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –∑–Ω–∞—é—Ç, –ª–∞–º–ø–æ–≤–æ–µ –æ–±—â–µ–Ω–∏–µ –∏ –æ–±–º–µ–Ω—ã –ø–æ–º–æ–≥—É—Ç –Ω–∞–π—Ç–∏ –¥—Ä—É–∑–µ–πüíñ

‚Ä¢ _–í–æ–∑—Ä–∞—Å—Ç_: –¥–æ 18 –ª–µ—Çüôà
‚Ä¢ _–ü—Ä–æ–≤–µ—Ä–∫–∞_: –∫—Ä—É–∂–æ–∫ –∏–ª–∏ —Ñ–æ—Ç–æ —Å–æ –∑–Ω–∞–∫–∞–º–∏üò≥
‚Ä¢ _–ö–æ–Ω–∫—É—Ä—Å_: –∏–º–µ—é—Ç—Å—èüåπ
‚Ä¢ _–ü—Ä–∏–∑—ã_: –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æüíï
‚Ä¢ _–ê–∫—Ç–∏–≤ –∏ –æ–±—â–µ–Ω–∏–µ_: –∑–∞–≤–∞–ª–∏—Å—åü´£''', parse_mode=ParseMode.MARKDOWN_V2)
    await message.answer('–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –∫ —Ç–µ–±–µ –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?^^')
    await state.set_state(RegistrationStates.name)


@reg_router.message(RegistrationStates.name, NameFilter(20), F.text)
async def known_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer('–ö—Ä–∞—Å–∏–≤–æ–µ –∏–º—è^^ –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?')
    await state.set_state(RegistrationStates.age)


@reg_router.message(RegistrationStates.name)
async def known_name_error(message: Message):
    await message.answer('–£–ø—Å, –≤–∏–¥–∏–º–æ —á—Ç–æ —Ç–æ –Ω–µ —Ç–∞–∫ —Å —Ç–≤–æ–∏–º –∏–º–µ—á–∫–æ–º^^" –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑')


@reg_router.message(RegistrationStates.age, AgeLimit(), F.text)
async def known_age(message: Message, state: FSMContext):
    await state.update_data(age=int(message.text))
    await message.answer('–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –Ω—É–∂–Ω–∞, —á—Ç–æ–±—ã –∫ –Ω–∞–º –∑–∞—Ö–æ–¥–∏–ª–∏ —Ç–æ–ª—å–∫–æ –¥–µ—Ç–∏^^',
                         reply_markup=checking_choise_markup)
    await state.set_state(RegistrationStates.task)


@reg_router.message(RegistrationStates.age)
async def known_age_error(message: Message):
    await message.answer('–ö–∞–∫–∞—è —Ç–æ –æ—à–∏–±–æ—á–∫–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞( –õ–∏–±–æ —Ç–µ–±–µ 18 –∏–ª–∏ –±–æ–ª—å—à–µ, –ª–∏–±–æ —Ç—ã —Å–æ–≤—Å–µ–º –Ω–µ —á–∏—Å–ª–æ –Ω–∞–ø–∏—Å–∞–ª. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑^^')


@reg_router.callback_query(RegistrationStates.video_note, F.data == 'cancel')
@reg_router.callback_query(RegistrationStates.photoes, F.data == 'cancel')
async def cancelled(callback: CallbackQuery, state: FSMContext):

    data = await state.get_data()
    data.get('photoes').clear()
    await callback.message.answer('–í—ã–±–µ—Ä–∏ —Ç–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –Ω—É–∂–Ω–∞, —á—Ç–æ–±—ã –∫ –Ω–∞–º –∑–∞—Ö–æ–¥–∏–ª–∏ —Ç–æ–ª—å–∫–æ –¥–µ—Ç–∏^^',
                                  reply_markup=checking_choise_markup)
    await state.set_state(RegistrationStates.task)
    await callback.answer()


def generate_video_note_task():
    hand_emojies_set = set()
    while len(hand_emojies_set) < 2:
        hand_emojies_set.add(choice(hand_emojies))
    return '–ó–∞–ø–∏—à–∏ –∫—Ä—É–∂–æ—á–µ–∫, –≥–¥–µ —Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ—à—å –≥—Ä—É–¥—å –∏ —Ç–æ—Ä—Å (–º–æ–∂–Ω–æ –∏ –±–µ–∑ –ª–∏—Ü–∞ –∏ –≥–æ–ª–æ—Å–∞) \
–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—à—å 2 –∂–µ—Å—Ç–∞: {} –∏ {}'.format(*list(hand_emojies_set))


@reg_router.callback_query(RegistrationStates.task, F.data == 'video_note')
async def video_note_task(callback: CallbackQuery, state: FSMContext):
    task = generate_video_note_task()
    await state.update_data(task=task)
    await state.set_state(RegistrationStates.video_note)
    await callback.message.answer(f'–ò—Ç–∞–∫, –æ—Ç–ø—Ä–∞–≤—å –∫—Ä—É–∂–æ–∫ —Å –ª–∏—Ü–æ–º –∏–ª–∏ —Ç–µ–ª–æ–º, —á—Ç–æ–±—ã –±—ã–ª–æ –ø–æ–Ω—è—Ç–Ω–µ–Ω—å–∫–æ, —á—Ç–æ —Ç–µ–±–µ –º–µ–Ω—å—à–µ 18^^', reply_markup=checking_cancel_markup)
    await callback.answer()


@reg_router.message(RegistrationStates.video_note, F.video_note)
async def video_note_check(message: Message, state: FSMContext):
    await state.set_state(RegistrationStates.checking)
    data = await state.get_data()
    keyboard = await make_keyboard_accepting(data.get('user_id'))
    await message.answer('–û–∫–∏, —Å–µ–π—á–∞—Å –≤—Å—ë –ø—Ä–æ–≤–µ—Ä—è—Ç –∏ —è —Å–∫–∞–∂—É, –Ω–æ—Ä–º–∏–∫ –∏–ª–∏ –Ω–µ—Ç^^')
    await message.bot.send_video_note(ADMIN_GROUP_ID, message.video_note.file_id)
    await message.bot.send_message(ADMIN_GROUP_ID, f'–ß—É–≤–∞—á–æ–∫ @{message.from_user.username} —Å–∫–∞–∑–∞–ª, \
—á—Ç–æ –æ–Ω {data.get('name')}, –µ–º—É {data.get('age')} –∏ –æ–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª –∫—Ä—É–∂–æ–∫ c —Ç–µ–ª–æ–º –∏–ª–∏ –ª–∏—Ü–æ–º. –ü—Ä–∏–Ω–∏–º–∞–µ–º???', reply_markup=keyboard)


def generate_photoes_task():
    hand_emojies_set = set()
    while len(hand_emojies_set) < 3:
        hand_emojies_set.add(choice(hand_emojies))
    return 'C–∫–∏–Ω—å 3 —Ñ–æ—Ç–∫–∏ —Å 3 –Ω—É–∂–Ω—ã–º–∏ –∂–µ—Å—Ç–∞–º–∏: {}, {}, –∏ {}. –í—Ä–µ–º—è –ø–æ—Ç—Ä–∞—Ç—å –Ω–µ –±–æ–ª—å—à–µ 10 –º–∏–Ω—É—Ç'.format(*list(hand_emojies_set))


@reg_router.callback_query(RegistrationStates.task, F.data == 'photoes')
async def video_note_task(callback: CallbackQuery, state: FSMContext):
    task = generate_photoes_task()
    await state.update_data(task=task)
    await state.update_data(time=time())
    await state.set_state(RegistrationStates.photoes)
    await callback.message.answer(f'–ò—Ç–∞–∫, –≤–æ—Ç —Ç–≤–æ—è –∑–∞–¥–∞—á–∞:\n\n{task}', reply_markup=checking_cancel_markup)
    await callback.answer()


@reg_router.message(RegistrationStates.photoes, F.photo)
async def video_note_check(message: Message, state: FSMContext):
    data = await state.get_data()
    if (time() - data.get('time')) <= 600:
        photoes = data.get('photoes')
        photoes.append(message.photo[-1])
        if len(photoes) >= 3:
            local_photoes = photoes.copy()
            photoes.clear()
            await state.set_state(RegistrationStates.checking)
            keyboard = await make_keyboard_accepting(data.get('user_id'))
            await message.answer('–û–∫–∏, —Å–µ–π—á–∞—Å –≤—Å—ë –ø—Ä–æ–≤–µ—Ä—è—Ç –∏ —è —Å–∫–∞–∂—É, –Ω–æ—Ä–º–∏–∫ –∏–ª–∏ –Ω–µ—Ç^^')
            await message.bot.send_photo(ADMIN_GROUP_ID, local_photoes[0].file_id)
            await message.bot.send_photo(ADMIN_GROUP_ID, local_photoes[1].file_id)
            await message.bot.send_photo(ADMIN_GROUP_ID, local_photoes[2].file_id)
            await message.bot.send_message(ADMIN_GROUP_ID, f'–ß—É–≤–∞—á–æ–∫ @{message.from_user.username} —Å–∫–∞–∑–∞–ª, \
—á—Ç–æ –æ–Ω {data.get('name')}, –µ–º—É {data.get('age')} –∏ –æ–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ—á–∫–∏ c —Ç–∞–∫–∏–º –∑–∞–¥–∞–Ω–∏–µ–º:\n\n{data.get('task')}\n\n–ü—Ä–∏–Ω–∏–º–∞–µ–º???', reply_markup=keyboard)
    else:
        await message.answer('–¢—ã –Ω–µ —É—Å–ø–µ–ª( –ù–∞–∂–º–∏ "–û—Ç–º–µ–Ω–∞" –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑', reply_markup=checking_cancel_markup)


@admin_chat_router.callback_query(F.data.startswith('accepted'))
async def accepted(callback: CallbackQuery):
    user_id = callback.data.split('_')[-1]
    await callback.bot.send_message(user_id, '–ú–æ–ª–æ–¥–µ—Ü, —Ç—ã –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–æ—á–∫—É! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—à —á–∞—Ç–∏–∫^^ <—Ç–∏–ø–æ —Å—Å—ã–ª–∫–∞>')
    await callback.message.edit_text(text='‚úÖ', reply_markup=None)


@admin_chat_router.callback_query(F.data.startswith('rejected'))
async def accepted(callback: CallbackQuery):
    user_id = callback.data.split('_')[-1]
    await callback.bot.send_message(user_id, '–¢—ã –Ω–µ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–æ—á–∫—É( –ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ')
    await callback.message.edit_text(text='‚ùé', reply_markup=None)


@admin_chat_router.message(CommandStart())
async def admin_start(message: Message):
    await message.answer(f'ID —ç—Ç–æ–π –≥—Ä—É–ø–ø–æ—á–∫–∏^^: {message.chat.id}')
